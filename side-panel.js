// side-panel.js - Simplified side panel functionality

document.addEventListener('DOMContentLoaded', async function() {
    const screenshotButton = document.getElementById('screenshotButton');
    const status = document.getElementById('status');
    const chatResponse = document.getElementById('chatResponse');
    
    let currentScreenshotData = null;

    // Initialize side panel
    await initializeSidePanel();

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    function updateStatus(message, type = 'info') {
        status.textContent = message;
        status.className = `status ${type}`;
        
        // Auto-hide success messages after 3 seconds
        if (type === 'success') {
            setTimeout(() => {
                status.textContent = '';
                status.className = 'status';
            }, 3000);
        }
    }

    // Initialize side panel
    async function initializeSidePanel() {
        try {
            updateStatus('‚úÖ Side panel –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 'success');
        } catch (error) {
            console.error('Error initializing side panel:', error);
            updateStatus('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', 'error');
        }
    }

    // Update chat response display
    function updateChatResponse(response) {
        chatResponse.textContent = response || '–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ ChatGPT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞...';
    }


    // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    async function copyToClipboard(dataUrl) {
        try {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å data URL –≤ blob
            const response = await fetch(dataUrl);
            const blob = await response.blob();
            
            // –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            await navigator.clipboard.write([
                new ClipboardItem({
                    'image/png': blob
                })
            ]);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
            throw error;
        }
    }

    // Listen for messages from background script (for ChatGPT responses)
    chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
        if (request.action === 'chatGPTResponse') {
            updateChatResponse(request.response);
            updateStatus('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT', 'success');
        }
    });

    // Listen for screenshot button click in side panel
    screenshotButton.addEventListener('click', async function() {
        updateStatus('üì∑ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...', 'loading');
        screenshotButton.disabled = true;

        try {
            // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
            const tabs = await chrome.tabs.query({active: true, currentWindow: true});
            const currentTab = tabs[0];

            if (!currentTab) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É');
            }

            // –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
            const dataUrl = await chrome.tabs.captureVisibleTab(currentTab.windowId, {
                format: 'png',
                quality: 90
            });

            currentScreenshotData = dataUrl;
            
            updateStatus('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –≥–æ—Ç–æ–≤! –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.', 'success');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            await copyToClipboard(dataUrl);
            
            updateStatus('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ ChatGPT...', 'loading');
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ ChatGPT —á–µ—Ä–µ–∑ background script
            const response = await chrome.runtime.sendMessage({
                action: 'sendToChatGPT',
                dataUrl: dataUrl,
                prompt: '–Ω–∞–π–¥–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–∏—Ö'
            });

            if (response.success) {
                updateStatus('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ ChatGPT!', 'success');
            } else {
                throw new Error(response.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ChatGPT');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error);
            updateStatus(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
        } finally {
            screenshotButton.disabled = false;
        }
    });
});
