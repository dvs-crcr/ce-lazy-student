// popup.js - Handles popup functionality for mode selection

document.addEventListener('DOMContentLoaded', function() {
    const openSidePanelButton = document.getElementById('openSidePanelButton');
    const copyToClipboardButton = document.getElementById('copyToClipboardButton');
    const downloadButton = document.getElementById('downloadButton');
    const status = document.getElementById('status');
    const preview = document.getElementById('preview');
    const previewImage = document.getElementById('previewImage');
    const apiTokenInput = document.getElementById('apiToken');
    const tokenIndicator = document.getElementById('tokenIndicator');
    const tokenText = document.getElementById('tokenText');
    
    let currentScreenshotData = null;

    // Initialize popup
    initializePopup();

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    function updateStatus(message, type = 'info') {
        status.textContent = message;
        status.className = `status ${type}`;
    }

    // Initialize popup
    async function initializePopup() {
        try {
            // Load saved token
            const result = await chrome.storage.local.get(['openaiApiToken']);
            if (result.openaiApiToken) {
                apiTokenInput.value = result.openaiApiToken;
                updateTokenStatus(true);
            } else {
                updateTokenStatus(false);
            }
        } catch (error) {
            console.error('Error initializing popup:', error);
        }
    }

    // Update token status display
    function updateTokenStatus(isValid) {
        if (isValid && apiTokenInput.value.trim()) {
            tokenIndicator.textContent = '‚úÖ';
            tokenText.textContent = '–¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
            tokenIndicator.style.color = '#4CAF50';
            tokenText.style.color = '#4CAF50';
        } else {
            tokenIndicator.textContent = '‚ùå';
            tokenText.textContent = '–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
            tokenIndicator.style.color = '#f44336';
            tokenText.style.color = '#f44336';
        }
    }

    // Save token when input changes
    apiTokenInput.addEventListener('input', async function() {
        const token = apiTokenInput.value.trim();
        
        if (token && token.startsWith('sk-')) {
            try {
                await chrome.storage.local.set({openaiApiToken: token});
                updateTokenStatus(true);
                updateStatus('‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
            } catch (error) {
                console.error('Error saving token:', error);
                updateStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞', 'error');
            }
        } else {
            updateTokenStatus(false);
            if (token && !token.startsWith('sk-')) {
                updateStatus('‚ö†Ô∏è –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "sk-"', 'error');
            }
        }
    });

    // –û—Ç–∫—Ä—ã—Ç—å Side Panel
    openSidePanelButton.addEventListener('click', async function() {
        try {
            updateStatus('üì± –û—Ç–∫—Ä—ã–≤–∞—é Side Panel...', 'loading');
            
            const tabs = await chrome.tabs.query({active: true, currentWindow: true});
            if (tabs[0]) {
                await chrome.sidePanel.open({tabId: tabs[0].id});
                updateStatus('‚úÖ Side Panel –æ—Ç–∫—Ä—ã—Ç!', 'success');
                
                // Close popup after opening side panel
                setTimeout(() => {
                    window.close();
                }, 1000);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Side Panel:', error);
            updateStatus(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
        }
    });

    // –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    copyToClipboardButton.addEventListener('click', async function() {
        if (currentScreenshotData) {
            await copyToClipboard(currentScreenshotData);
            updateStatus('üìã –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        }
    });

    // –°–∫–∞—á–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
    downloadButton.addEventListener('click', function() {
        if (currentScreenshotData) {
            downloadScreenshot(currentScreenshotData);
            updateStatus('üíæ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∫–∞—á–∞–Ω!', 'success');
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    async function copyToClipboard(dataUrl) {
        try {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å data URL –≤ blob
            const response = await fetch(dataUrl);
            const blob = await response.blob();
            
            // –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            await navigator.clipboard.write([
                new ClipboardItem({
                    'image/png': blob
                })
            ]);
            
            updateStatus('üìã –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
            updateStatus('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'error');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    function downloadScreenshot(dataUrl) {
        try {
            const link = document.createElement('a');
            link.download = `screenshot-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.png`;
            link.href = dataUrl;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:', error);
            updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏', 'error');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    chrome.storage.local.get(['screenshotSettings'], function(result) {
        if (result.screenshotSettings) {
            console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }
    });
});
